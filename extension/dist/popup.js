(()=>{const e="http://localhost:3000";let n={step:1,repoOwner:"",repoName:"",backgroundKnowledge:null,contributionAnalysis:null,username:"",portfolioHtml:"",progress:0};async function t(n,t){try{console.log(`API 호출: ${n}`,t);const o=await fetch(`${e}/${n}`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(t)});console.log("응답 상태:",o.status,o.statusText);const r=o.headers.get("content-type");if(console.log("응답 콘텐츠 타입:",r),!r||!r.includes("application/json")){const e=await o.text();throw console.error("응답이 JSON이 아님. 응답 (처음 100자):",e.substring(0,100)),new Error("서버가 유효한 JSON을 반환하지 않았습니다. 서버 상태를 확인하세요.")}if(!o.ok)try{const e=await o.json();throw new Error(e.details||e.message||`서버 오류: ${o.status}`)}catch(e){throw new Error(`서버 응답 오류 (${o.status}): JSON 파싱 실패`)}try{return await o.json()}catch(e){throw console.error("JSON 파싱 오류:",e),new Error("서버 응답 데이터를 파싱할 수 없습니다")}}catch(e){throw console.error("API 호출 오류:",e),e}}async function o(){try{const n=await fetch(`${e}/ping`,{method:"GET",headers:{Accept:"application/json"}});if(!n.ok)return console.error("서버 상태 확인 실패:",n.status),!1;try{const e=await n.json();return console.log("서버 상태 확인 성공:",e),!0}catch(e){return console.error("서버 응답 파싱 실패:",e),!1}}catch(e){return console.error("서버 연결 실패:",e),!1}}document.addEventListener("DOMContentLoaded",(async function(){const e=document.getElementById("status"),r=document.getElementById("loader"),a=document.getElementById("result"),s=document.getElementById("resultActions"),i=document.querySelector(".progress-bar"),c=document.getElementById("progress-text"),l=document.getElementById("analyzeRepoBtn"),d=document.getElementById("analyzeContributionsBtn"),u=document.getElementById("generatePortfolioBtn"),p=document.getElementById("copyHtmlBtn"),m=document.getElementById("downloadHtmlBtn"),g=document.getElementById("previewBtn"),y=document.getElementById("step1"),b=document.getElementById("step2"),h=document.getElementById("step3"),w=document.getElementById("step1-status"),f=document.getElementById("step2-status"),E=document.getElementById("step3-status"),v=document.getElementById("repoUrl"),$=document.getElementById("username"),k=document.createElement("button");function B(n,t="primary"){e.textContent=n,e.className=`alert alert-${t}`}function I(e){i&&c&&(n.progress=e,i.style.width=`${e}%`,c.textContent=`${e}%`)}function L(e,n,t){const o=[w,f,E][e-1];if(o){switch(n){case"waiting":o.textContent="대기 중",o.className="badge bg-secondary";break;case"in-progress":o.textContent="진행 중",o.className="badge bg-primary";break;case"completed":o.textContent="완료",o.className="badge bg-success";break;case"error":o.textContent="오류",o.className="badge bg-danger"}t&&B(t,"error"===n?"danger":"info")}}function x(e){n.step=e,y&&b&&h&&[y,b,h].forEach(((n,t)=>{t+1===e?n.classList.add("step-active"):n.classList.remove("step-active")}))}k.textContent="서버 연결 확인",k.className="btn btn-sm btn-outline-secondary mt-2 mb-2",k.addEventListener("click",(async function(){B("서버 연결 확인 중...","info"),await o()?B("서버에 연결되었습니다.","success"):B("서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.","danger")})),e&&r&&a?(e.parentNode&&e.parentNode.insertBefore(k,e.nextSibling),await o()||B("서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.","warning"),chrome.tabs.query({active:!0,currentWindow:!0},(function(e){const t=e[0].url.match(/^https:\/\/github\.com\/([^\/]+)\/([^\/]+)(?:\/.*)?$/);t&&v?(n.repoOwner=t[1],n.repoName=t[2],v.value=`https://github.com/${n.repoOwner}/${n.repoName}`,B("GitHub 레포지토리가 감지되었습니다.","info")):(B("GitHub 레포지토리 페이지에서 실행해주세요.","warning"),l&&(l.disabled=!0))})),l&&l.addEventListener("click",(async function(){try{if(!await o())throw new Error("서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.");L(1,"in-progress","레포지토리 분석 중..."),x(1),r.style.display="block",l&&(l.disabled=!0),a.innerHTML="",s&&(s.style.display="none"),I(10);const e=await t("api/analyze-repo",{owner:n.repoOwner,repo:n.repoName});I(30),n.backgroundKnowledge=e.backgroundKnowledge,a.innerHTML=`\n        <h4>레포지토리 분석 결과</h4>\n        <div class="card mb-3">\n          <div class="card-body">\n            <h5 class="card-title">${e.repoInfo.name}</h5>\n            <h6 class="card-subtitle mb-2 text-muted">by ${e.repoInfo.owner}</h6>\n            <p class="card-text">${e.repoInfo.description||"설명 없음"}</p>\n            <div class="mb-2">\n              <span class="badge bg-primary">${e.repoInfo.language||"Unknown"}</span>\n              <span class="badge bg-secondary">⭐ ${e.repoInfo.stars}</span>\n              <span class="badge bg-secondary">🍴 ${e.repoInfo.forks}</span>\n            </div>\n            <h6>프로젝트 개요</h6>\n            <p>${e.backgroundKnowledge.projectOverview||"정보 없음"}</p>\n            <h6>주요 기능</h6>\n            <ul>\n              ${(e.backgroundKnowledge.keyFeatures||[]).map((e=>`<li>${e}</li>`)).join("")}\n            </ul>\n            <h6>기술 스택</h6>\n            <div>\n              ${(e.backgroundKnowledge.techStack||[]).map((e=>`<span class="badge bg-info text-dark m-1">${e}</span>`)).join("")}\n            </div>\n          </div>\n        </div>\n      `,I(40),L(1,"completed","레포지토리 분석 완료!"),L(2,"waiting"),x(2),l&&(l.disabled=!1)}catch(e){console.error("레포지토리 분석 오류:",e),L(1,"error",`오류: ${e.message}`),l&&(l.disabled=!1)}finally{r.style.display="none"}})),d&&d.addEventListener("click",(async function(){try{if(!await o())throw new Error("서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.");if(!$)return void B("사용자명 입력 필드를 찾을 수 없습니다.","warning");const e=$.value.trim();if(!e)return void B("GitHub 사용자명을 입력해주세요.","warning");n.username=e,L(2,"in-progress","사용자 기여 분석 중..."),r.style.display="block",d&&(d.disabled=!0),I(50);const s=await t("api/analyze-contributions",{owner:n.repoOwner,repo:n.repoName,username:e});I(70),n.contributionAnalysis=s.contributionAnalysis;const i=document.createElement("div");i.innerHTML=`\n        <h4>사용자 기여 분석</h4>\n        <div class="card mb-3">\n          <div class="card-body">\n            <h5 class="card-title">${e}의 기여</h5>\n            \n            <h6>주요 기여 영역</h6>\n            <ul>\n              ${(s.contributionAnalysis.contributionAreas||[]).map((e=>`<li>${e}</li>`)).join("")}\n            </ul>\n            \n            <h6>기술적 역량</h6>\n            <div class="mb-2">\n              ${(s.contributionAnalysis.technicalSkills||[]).map((e=>`<span class="badge bg-success m-1">${e}</span>`)).join("")}\n            </div>\n            \n            <h6>기여 요약</h6>\n            <p>${s.contributionAnalysis.contributionSummary||"정보 없음"}</p>\n            \n            <h6>핵심 코드 변경사항</h6>\n            <ul>\n              ${(s.contributionAnalysis.keyCodeChanges||[]).map((e=>`<li>${e}</li>`)).join("")}\n            </ul>\n            \n            <h6>영향력 분석</h6>\n            <p>${s.contributionAnalysis.impactAnalysis||"정보 없음"}</p>\n          </div>\n        </div>\n      `,a.appendChild(i),I(80),L(2,"completed","사용자 기여 분석 완료!"),L(3,"waiting"),x(3),d&&(d.disabled=!1)}catch(e){console.error("사용자 기여 분석 오류:",e),L(2,"error",`오류: ${e.message}`),d&&(d.disabled=!1)}finally{r.style.display="none"}})),u&&u.addEventListener("click",(async function(){try{if(!await o())throw new Error("서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.");if(!n.backgroundKnowledge)return B("먼저 레포지토리를 분석해주세요.","warning"),void x(1);if(!n.contributionAnalysis)return B("먼저 사용자 기여를 분석해주세요.","warning"),void x(2);L(3,"in-progress","포트폴리오 생성 중..."),r.style.display="block",u&&(u.disabled=!0),a.innerHTML="",I(85);const e=await t("api/generate-portfolio",{backgroundKnowledge:n.backgroundKnowledge,contributionAnalysis:n.contributionAnalysis,username:n.username});I(95),n.portfolioHtml=e.html;const i=document.createElement("iframe");i.style.width="100%",i.style.height="400px",i.style.border="1px solid #ddd",i.style.borderRadius="5px",a.appendChild(i);const c=i.contentWindow.document;c.open(),c.write(e.html),c.close(),s&&(s.style.display="block"),I(100),L(3,"completed","포트폴리오 생성 완료!"),u&&(u.disabled=!1)}catch(e){console.error("포트폴리오 생성 오류:",e),L(3,"error",`오류: ${e.message}`),u&&(u.disabled=!1)}finally{r.style.display="none"}})),p&&p.addEventListener("click",(function(){n.portfolioHtml&&navigator.clipboard.writeText(n.portfolioHtml).then((()=>{p&&(p.textContent="복사됨!",setTimeout((()=>{p.textContent="HTML 복사"}),2e3))})).catch((e=>{console.error("복사 실패:",e),B("HTML 복사 실패","danger")}))})),m&&m.addEventListener("click",(function(){if(!n.portfolioHtml)return;const e=new Blob([n.portfolioHtml],{type:"text/html"}),t=URL.createObjectURL(e),o=document.createElement("a");o.href=t,o.download=`${n.repoName}-portfolio.html`,o.click(),URL.revokeObjectURL(t)})),g&&g.addEventListener("click",(function(){if(!n.portfolioHtml)return;const e=window.open("","_blank");e.document.write(n.portfolioHtml),e.document.close()})),v&&v.addEventListener("change",(function(){const e=v.value.match(/^https:\/\/github\.com\/([^\/]+)\/([^\/]+)(?:\/.*)?$/);e?(n.repoOwner=e[1],n.repoName=e[2],l&&(l.disabled=!1)):(B("유효한 GitHub 레포지토리 URL을 입력해주세요.","warning"),l&&(l.disabled=!0))}))):console.error("필수 DOM 요소를 찾을 수 없습니다. HTML 파일을 확인하세요.")}))})();